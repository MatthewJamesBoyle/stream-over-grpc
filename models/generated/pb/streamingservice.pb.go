// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.4
// source: streamingservice.proto

package pb

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StatusCode int32

const (
	StatusCode_FAILURE StatusCode = 0
	StatusCode_SUCCESS StatusCode = 1
)

// Enum value maps for StatusCode.
var (
	StatusCode_name = map[int32]string{
		0: "FAILURE",
		1: "SUCCESS",
	}
	StatusCode_value = map[string]int32{
		"FAILURE": 0,
		"SUCCESS": 1,
	}
)

func (x StatusCode) Enum() *StatusCode {
	p := new(StatusCode)
	*p = x
	return p
}

func (x StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_streamingservice_proto_enumTypes[0].Descriptor()
}

func (StatusCode) Type() protoreflect.EnumType {
	return &file_streamingservice_proto_enumTypes[0]
}

func (x StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusCode.Descriptor instead.
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_streamingservice_proto_rawDescGZIP(), []int{0}
}

type GetVideoDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []byte `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
}

func (x *GetVideoDataRequest) Reset() {
	*x = GetVideoDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_streamingservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVideoDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoDataRequest) ProtoMessage() {}

func (x *GetVideoDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamingservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoDataRequest.ProtoReflect.Descriptor instead.
func (*GetVideoDataRequest) Descriptor() ([]byte, []int) {
	return file_streamingservice_proto_rawDescGZIP(), []int{0}
}

func (x *GetVideoDataRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type GetVideoDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode StatusCode `protobuf:"varint,1,opt,name=StatusCode,proto3,enum=StatusCode" json:"StatusCode,omitempty"`
}

func (x *GetVideoDataResponse) Reset() {
	*x = GetVideoDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_streamingservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVideoDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVideoDataResponse) ProtoMessage() {}

func (x *GetVideoDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_streamingservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVideoDataResponse.ProtoReflect.Descriptor instead.
func (*GetVideoDataResponse) Descriptor() ([]byte, []int) {
	return file_streamingservice_proto_rawDescGZIP(), []int{1}
}

func (x *GetVideoDataResponse) GetStatusCode() StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return StatusCode_FAILURE
}

var File_streamingservice_proto protoreflect.FileDescriptor

var file_streamingservice_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x43, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2a, 0x26,
	0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x32, 0x53, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x2e, 0x47, 0x65, 0x74,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x42, 0x0e, 0x5a, 0x0c, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_streamingservice_proto_rawDescOnce sync.Once
	file_streamingservice_proto_rawDescData = file_streamingservice_proto_rawDesc
)

func file_streamingservice_proto_rawDescGZIP() []byte {
	file_streamingservice_proto_rawDescOnce.Do(func() {
		file_streamingservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_streamingservice_proto_rawDescData)
	})
	return file_streamingservice_proto_rawDescData
}

var file_streamingservice_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_streamingservice_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_streamingservice_proto_goTypes = []interface{}{
	(StatusCode)(0),              // 0: StatusCode
	(*GetVideoDataRequest)(nil),  // 1: GetVideoDataRequest
	(*GetVideoDataResponse)(nil), // 2: GetVideoDataResponse
}
var file_streamingservice_proto_depIdxs = []int32{
	0, // 0: GetVideoDataResponse.StatusCode:type_name -> StatusCode
	1, // 1: StreamingService.GetVideoData:input_type -> GetVideoDataRequest
	2, // 2: StreamingService.GetVideoData:output_type -> GetVideoDataResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_streamingservice_proto_init() }
func file_streamingservice_proto_init() {
	if File_streamingservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_streamingservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVideoDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_streamingservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVideoDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_streamingservice_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_streamingservice_proto_goTypes,
		DependencyIndexes: file_streamingservice_proto_depIdxs,
		EnumInfos:         file_streamingservice_proto_enumTypes,
		MessageInfos:      file_streamingservice_proto_msgTypes,
	}.Build()
	File_streamingservice_proto = out.File
	file_streamingservice_proto_rawDesc = nil
	file_streamingservice_proto_goTypes = nil
	file_streamingservice_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StreamingServiceClient is the client API for StreamingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamingServiceClient interface {
	GetVideoData(ctx context.Context, opts ...grpc.CallOption) (StreamingService_GetVideoDataClient, error)
}

type streamingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamingServiceClient(cc grpc.ClientConnInterface) StreamingServiceClient {
	return &streamingServiceClient{cc}
}

func (c *streamingServiceClient) GetVideoData(ctx context.Context, opts ...grpc.CallOption) (StreamingService_GetVideoDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_StreamingService_serviceDesc.Streams[0], "/StreamingService/GetVideoData", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamingServiceGetVideoDataClient{stream}
	return x, nil
}

type StreamingService_GetVideoDataClient interface {
	Send(*GetVideoDataRequest) error
	CloseAndRecv() (*GetVideoDataResponse, error)
	grpc.ClientStream
}

type streamingServiceGetVideoDataClient struct {
	grpc.ClientStream
}

func (x *streamingServiceGetVideoDataClient) Send(m *GetVideoDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamingServiceGetVideoDataClient) CloseAndRecv() (*GetVideoDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GetVideoDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamingServiceServer is the server API for StreamingService service.
type StreamingServiceServer interface {
	GetVideoData(StreamingService_GetVideoDataServer) error
}

// UnimplementedStreamingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStreamingServiceServer struct {
}

func (*UnimplementedStreamingServiceServer) GetVideoData(StreamingService_GetVideoDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVideoData not implemented")
}

func RegisterStreamingServiceServer(s *grpc.Server, srv StreamingServiceServer) {
	s.RegisterService(&_StreamingService_serviceDesc, srv)
}

func _StreamingService_GetVideoData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamingServiceServer).GetVideoData(&streamingServiceGetVideoDataServer{stream})
}

type StreamingService_GetVideoDataServer interface {
	SendAndClose(*GetVideoDataResponse) error
	Recv() (*GetVideoDataRequest, error)
	grpc.ServerStream
}

type streamingServiceGetVideoDataServer struct {
	grpc.ServerStream
}

func (x *streamingServiceGetVideoDataServer) SendAndClose(m *GetVideoDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamingServiceGetVideoDataServer) Recv() (*GetVideoDataRequest, error) {
	m := new(GetVideoDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StreamingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "StreamingService",
	HandlerType: (*StreamingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetVideoData",
			Handler:       _StreamingService_GetVideoData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "streamingservice.proto",
}
